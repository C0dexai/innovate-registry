import { orchestrationConfig } from '../orchestration.config';
import { FileType } from '../types';
import type { FileNode, ChatMessage } from '../types';

// Re-using the SPA file structure from geminiService for the final output
const spaFileStructure: Omit<FileNode, 'id'>[] = [
    {
        name: 'index.html', type: FileType.File, path: '/index.html',
        content: `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`
    },
    { name: 'src', type: FileType.Directory, path: '/src', children: [] },
    {
        name: 'vite.config.ts', type: FileType.File, path: '/vite.config.ts',
        content: `import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n})`
    },
    {
        name: 'tsconfig.json', type: FileType.File, path: '/tsconfig.json',
        content: `{\n  "compilerOptions": {\n    "target": "ES2020",\n    "useDefineForClassFields": true,\n    "lib": ["ES2020", "DOM", "DOM.Iterable"],\n    "module": "ESNext",\n    "skipLibCheck": true,\n    "moduleResolution": "bundler",\n    "allowImportingTsExtensions": true,\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "noEmit": true,\n    "jsx": "react-jsx",\n    "strict": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "noFallthroughCasesInSwitch": true\n  },\n  "include": ["src"],\n  "references": [{ "path": "./tsconfig.node.json" }]\n}`
    },
    {
        name: 'tailwind.config.js', type: FileType.File, path: '/tailwind.config.js',
        content: `/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    "./index.html",\n    "./src/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}`
    },
    {
        name: 'postcss.config.js', type: FileType.File, path: '/postcss.config.js',
        content: `export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}`
    },
    {
        name: 'main.tsx', type: FileType.File, path: '/src/main.tsx',
        content: `import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)`
    },
    {
        name: 'App.tsx', type: FileType.File, path: '/src/App.tsx',
        content: `import './App.css';\n\nfunction App() {\n  return (\n    <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center">\n      <h1 className="text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600">Dark Mode SPA</h1>\n      <p className="mt-4 text-slate-300">Generated by the Gemini multi-agent team.</p>\n      <div className="mt-8 p-4 border border-dashed border-slate-600 rounded-lg">\n        <p>Edit <code className="bg-slate-700 p-1 rounded text-sm">src/App.tsx</code> to get started.</p>\n      </div>\n    </div>\n  )\n}\n\nexport default App`
    },
    {
        name: 'index.css', type: FileType.File, path: '/src/index.css',
        content: `@tailwind base;\n@tailwind components;\n@tailwind utilities;`
    },
    {
        name: 'App.css', type: FileType.File, path: '/src/App.css',
        content: `/* You can add custom animations or styles here */`
    }
];


const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

type OrchestrationYield = ChatMessage | { type: 'files'; files: FileNode[] };

export const orchestrationService = {
    async *run(prompt: string): AsyncGenerator<OrchestrationYield> {
        const { taskflow } = orchestrationConfig;
        
        yield { id: `orch-${Date.now()}`, type: 'orchestration_status', agentName: 'System', text: `Orchestration triggered for: "${prompt}"`};
        await delay(500);
        
        // Generate a folder name from the prompt
        const folderName = prompt
            .replace(/create|a|an|react|spa|landing|page/gi, '')
            .trim()
            .replace(/[^a-zA-Z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .toLowerCase() || 'gemini-spa-project';

        yield { id: `orch-foldername-${Date.now()}`, type: 'orchestration_status', agentName: 'System', text: `Creating project folder: /${folderName}`};
        await delay(500);

        for (const step of taskflow) {
            yield { id: `orch-${Date.now()}`, type: 'orchestration_status', agentName: step.agent, text: step.action };
            await delay(1500); // Simulate work

            if (step.handoff) {
                 yield { id: `orch-${Date.now()}`, type: 'orchestration_handoff', fromAgent: step.agent, toAgent: step.handoff, text: `Handoff complete. ${step.handoff} is now taking over.` };
                 await delay(500);
            }
        }
        
        // Final step: file generation, now with folder path
        const generatedFiles = spaFileStructure.map(f => {
            const newPath = `/${folderName}${f.path}`;
            return { 
                ...f, 
                id: `file-${newPath.replace(/\//g, '_')}-${Date.now()}`,
                path: newPath,
            };
        });

        yield {
            type: 'files',
            files: generatedFiles
        };

        yield {
            id: `orch-final-${Date.now()}`,
            type: 'ai_response',
            text: `Orchestration complete! I've generated the files for the new SPA in the /${folderName} directory. You can see the file structure in the Explorer, and I've opened the main App component for you.`,
            suggestions: ["Run the SPA build process", "Explain the project structure", "Add a button to the page"]
        };
    }
};