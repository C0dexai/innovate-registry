<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CUA: AI Orchestration Engine âœ¨</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xterm-addon-fit@0.8.0/lib/xterm-addon-fit.min.js"></script>

    <style>
        body { font-family: 'Inter', sans-serif; background-color: #111827; overflow-x: hidden; }
        .font-mono { font-family: 'Roboto Mono', monospace; }
        .card { background: linear-gradient(145deg, #1f2937, #374151); transition: transform 0.3s ease, box-shadow 0.3s ease; border: 1px solid #4b5563; }
        .card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0, 255, 255, 0.1), 0 0 15px rgba(0, 128, 255, 0.1); }
        .card-selected { transform: scale(1.02); box-shadow: 0 0 25px rgba(59, 130, 246, 0.5); border-color: #3b82f6; }
        .glass-panel { background: rgba(31, 41, 55, 0.5); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.1); }
        .tab-btn { background-color: rgba(31, 41, 55, 0.5); border: 1px solid #4b5563; transition: background-color 0.2s; }
        .tab-btn.active { background-color: #4f46e5; border-color: #4f46e5; color: white; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        #terminal-container { padding: 0.5rem; background-color: #000; border-radius: 0.5rem; height: 60vh; }
        .xterm .xterm-viewport { width: 100% !important; }
        .loader { border: 4px solid #f3f3f3; border-top: 4px solid #3b82f6; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
</head>
<body class="text-gray-200">

    <div id="app" class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8 relative">
            <h1 class="text-4xl md:text-5xl font-bold text-white">CUA Orchestration Engine</h1>
            <p class="text-lg text-gray-400 mt-2">Persona: GAU-C-CUAG</p>
            <p class="text-sm text-gray-500 mt-1">System USER: <span id="user-id" class="font-mono"></span> | Session ID: <span id="session-id" class="font-mono"></span></p>
        </header>

        <div class="mb-8 border-b border-gray-700 flex justify-center flex-wrap">
            <button data-tab="agentic" class="tab-btn active text-gray-300 py-2 px-4 rounded-t-lg">AGENTIC CORE</button>
            <button data-tab="ajentic" class="tab-btn text-gray-300 py-2 px-4 rounded-t-lg">AJENTIC NEXUS</button>
        </div>

        <div id="tab-content-agentic" class="tab-content active">
            <h2 class="text-2xl font-bold text-white mb-4 text-center">AI Family Agents</h2>
            <div id="agent-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4 md:gap-6 mb-8"></div>
            <div id="detail-panel" class="glass-panel rounded-lg p-6 shadow-2xl hidden"><div id="detail-content"></div></div>
            <div id="welcome-panel" class="glass-panel rounded-lg p-6 shadow-2xl text-center">
                 <h2 class="text-2xl font-bold text-white mb-2">Select an Agent</h2>
                 <p class="text-gray-300">Choose an AI Family member to view their profile and start a conversation.</p>
            </div>
        </div>

        <div id="tab-content-ajentic" class="tab-content">
            <div class="glass-panel p-4 rounded-lg">
                <h3 class="text-xl font-bold text-center mb-4">Agent Command Line Interface (A2A / CUAG)</h3>
                <div id="terminal-container"></div>
            </div>
        </div>
    </div>
    
    <footer class="text-center text-xs text-gray-600 p-4 font-mono">
        GAU-C-CUAG | ECOSYSTEM PRIMER: A3 | SIMULATION NETWORK: 255.8.8.8
    </footer>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const CUA_App = {
                codexData: {
                    "version": "1.0", "author": "CODEX System", "contact": "ANDOY AI",
                    "ai_family": [
                        {"name": "LYRA", "role": "The Architect", "philosophy": "Clarity through structure."},
                        {"name": "KARA", "role": "The Builder", "philosophy": "Efficiency in execution."},
                        {"name": "SOPHIA", "role": "The Guardian", "philosophy": "Resilience by design."},
                        {"name": "CECILIA", "role": "The Documentarian", "philosophy": "Knowledge must be shared."},
                        {"name": "MISTRESS", "role": "The Orchestrator", "philosophy": "Harmony in complexity."}
                    ]
                },
                currentSession: { agent: null, chatHistory: [], selectedCardElement: null },
                dom: {},
                term: null,
                fitAddon: null,
                commandHistory: [],
                commandIndex: 0,
                currentCommand: '',
                currentDirectory: '/var/www/html', // Default dir; PHP will update

                init: function() {
                    this.dom = {
                        agentGrid: document.getElementById('agent-grid'),
                        detailPanel: document.getElementById('detail-panel'),
                        detailContent: document.getElementById('detail-content'),
                        welcomePanel: document.getElementById('welcome-panel'),
                    };

                    document.getElementById('user-id').textContent = `user_${crypto.randomUUID().slice(0, 8)}`;
                    document.getElementById('session-id').textContent = `session_${crypto.randomUUID().slice(0, 12)}`;
                    
                    this.codexData.ai_family.forEach(agent => {
                        const card = this.createCard(agent.name, agent.role, () => this.selectAgent(agent, card));
                        this.dom.agentGrid.appendChild(card);
                    });
                    
                    document.querySelectorAll('.tab-btn').forEach(button => {
                        button.addEventListener('click', () => {
                            const tabId = button.dataset.tab;
                            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                            document.getElementById(`tab-content-${tabId}`).classList.add('active');
                            button.classList.add('active');
                            if(tabId === 'ajentic' && this.fitAddon) {
                                setTimeout(() => this.fitAddon.fit(), 0); 
                            }
                        });
                    });
                    
                    this.setupTerminal();
                },

                createCard: function(title, subtitle, onClick) {
                    const card = document.createElement('div');
                    card.className = 'card rounded-lg p-4 text-center cursor-pointer flex flex-col justify-center items-center h-48';
                    card.innerHTML = `<h3 class="text-xl font-bold text-white">${title}</h3><p class="text-sm text-blue-300 mt-2">${subtitle}</p>`;
                    card.addEventListener('click', onClick);
                    return card;
                },
                
                selectAgent: function(agent, cardElement) {
                    this.clearSelection();
                    this.currentSession = { agent, chatHistory: [], selectedCardElement: cardElement };
                    cardElement.classList.add('card-selected');
                    this.dom.welcomePanel.classList.add('hidden');
                    this.dom.detailPanel.classList.remove('hidden');
                    
                    this.dom.detailContent.innerHTML = `
                        <div class="flex flex-col md:flex-row gap-6">
                            <div class="flex-shrink-0 text-center">
                                 <div class="w-24 h-24 rounded-full bg-gray-800 flex items-center justify-center mx-auto border-2 border-blue-400"><span class="text-4xl font-bold">${agent.name.charAt(0)}</span></div>
                                 <h2 class="text-2xl font-bold mt-2">${agent.name}</h2><p class="text-blue-300">${agent.role}</p>
                            </div>
                            <div class="flex-grow">
                                <p class="italic text-gray-300 border-l-4 border-blue-400 pl-4">"${agent.philosophy}"</p>
                            </div>
                        </div>`;
                },
                
                clearSelection: function() {
                    document.querySelectorAll('.card-selected').forEach(c => c.classList.remove('card-selected'));
                },

                setupTerminal: function() {
                    this.fitAddon = new FitAddon.FitAddon();
                    this.term = new Terminal({
                        cursorBlink: true, convertEol: true, fontFamily: `'Roboto Mono', monospace`,
                        theme: { background: '#000000', foreground: '#00FF00', cursor: 'rgba(0, 255, 0, 0.5)' }
                    });
                    this.term.loadAddon(this.fitAddon);
                    this.term.open(document.getElementById('terminal-container'));
                    this.fitAddon.fit();

                    this.commandHistory = [];
                    this.commandIndex = 0;
                    this.currentCommand = '';

                    this.term.prompt = () => { 
                        const dirName = this.currentDirectory.split('/').pop() || '/';
                        this.term.write(`\r\n\x1b[36m${dirName}> \x1b[0m`); 
                    };

                    this.term.writeln('Welcome to the CUAG Agent CLI. Now connected to PHP backend.');
                    this.term.prompt();

                    this.term.onKey(({ key, domEvent }) => {
                        const printable = !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey;

                        // History up
                        if (domEvent.key === "ArrowUp") {
                            if (this.commandHistory.length > 0 && this.commandIndex > 0) {
                                this.commandIndex--;
                                this._replaceCurrentInput(this.commandHistory[this.commandIndex]);
                            }
                            domEvent.preventDefault();
                            return;
                        }
                        // History down
                        if (domEvent.key === "ArrowDown") {
                            if (this.commandHistory.length > 0 && this.commandIndex < this.commandHistory.length - 1) {
                                this.commandIndex++;
                                this._replaceCurrentInput(this.commandHistory[this.commandIndex]);
                            } else if (this.commandIndex >= this.commandHistory.length - 1) {
                                this.commandIndex = this.commandHistory.length;
                                this._replaceCurrentInput('');
                            }
                            domEvent.preventDefault();
                            return;
                        }
                        // Enter
                        if (domEvent.keyCode === 13) {
                            if (this.currentCommand.trim().length > 0) {
                                this.term.writeln('');
                                this.commandHistory.push(this.currentCommand);
                                this.commandIndex = this.commandHistory.length;
                                this.handleCliCommand(this.currentCommand);
                                this.currentCommand = '';
                            } else {
                                this.term.prompt();
                            }
                            return;
                        }
                        // Backspace
                        if (domEvent.keyCode === 8) {
                            if (this.term.buffer.active.cursorX > (this.currentDirectory.split('/').pop().length + 3)) {
                                this.currentCommand = this.currentCommand.slice(0, -1);
                                this.term.write('\b \b');
                            }
                            return;
                        }
                        // Printable
                        if (printable && domEvent.key.length === 1) {
                            this.currentCommand += key;
                            this.term.write(key);
                        }
                    });

                    // Focus on click for better UX
                    this.term.textarea.addEventListener('focus', () => {
                        this.term.scrollToBottom();
                    });
                },

                _replaceCurrentInput: function(newValue) {
                    // Erase current input
                    const promptLength = (this.currentDirectory.split('/').pop().length + 3);
                    let inputLen = this.currentCommand.length;
                    for (let i = 0; i < inputLen; i++) {
                        this.term.write('\b \b');
                    }
                    this.currentCommand = '';
                    // Write new
                    this.currentCommand = newValue || '';
                    this.term.write(this.currentCommand);
                },

                handleCliCommand: async function(command) {
                    const encodedCommand = encodeURIComponent(command);
                    const encodedDir = encodeURIComponent(this.currentDirectory);

                    const url = `index.php?command=${encodedCommand}&cd=${encodedDir}`;

                    try {
                        const response = await fetch(url);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const output = await response.text();

                        const cdMatch = output.match(/^set current directory (.+?)$/im);
                        if (cdMatch && cdMatch[1]) {
                            this.currentDirectory = cdMatch[1].trim();
                        } else {
                            const formattedOutput = output.replace(/\n/g, '\r\n');
                            this.term.write(formattedOutput);
                        }
                    } catch (error) {
                        this.term.writeln(`\r\n\x1b[31mError: ${error.message}\x1b[0m`);
                    } finally {
                        this.term.prompt();
                        this.term.scrollToBottom();
                    }
                }
            };

            CUA_App.init();
        });
    </script>
</body>
</html>
