
import React from 'react';
import { Workflow, WorkflowPhase } from '../types';
import { Card } from './ui/Card';
import { SparklesIcon } from './icons/SparklesIcon';
import { Button } from './ui/Button';

interface WorkflowDisplayProps {
  workflow: Workflow | null;
  error: string | null;
  onStartSimulation?: () => void;
}

const Phase: React.FC<{ phase: WorkflowPhase }> = ({ phase }) => {
  return (
    <div className="border-t border-dark-base-300/50 p-4 first:border-t-0">
      <h3 className="text-lg font-medium text-brand-primary mb-2 drop-shadow-[0_0_5px_var(--tw-shadow-color)] shadow-brand-primary">
        {phase.phaseName}
      </h3>
      <div className="text-dark-base-content/90">
        <p className="mb-4 text-sm">{phase.description}</p>
        <h4 className="font-semibold mb-2 text-dark-base-content">Key Activities:</h4>
        <ul className="list-disc list-inside space-y-1 text-sm">
          {phase.activities.map((activity, i) => <li key={i}>{activity}</li>)}
        </ul>
        {phase.suggestedTools && phase.suggestedTools.length > 0 && (
           <>
            <h4 className="font-semibold mb-2 mt-4 text-dark-base-content">Suggested Tools:</h4>
            <div className="flex flex-wrap gap-2">
              {phase.suggestedTools.map((tool, i) => (
                 <span key={i} className="bg-dark-base-300 text-xs font-medium px-2.5 py-1 rounded-full">{tool}</span>
              ))}
            </div>
           </>
        )}
      </div>
    </div>
  );
};


const WorkflowDisplay: React.FC<WorkflowDisplayProps> = ({ workflow, error, onStartSimulation }) => {
  if (error) {
    return (
      <Card>
        <h2 className="text-xl font-semibold text-red-400 mb-2">Error</h2>
        <p className="text-red-400/90 bg-red-900/20 p-4 rounded-md">{error}</p>
      </Card>
    );
  }

  if (!workflow) {
    return (
      <Card className="min-h-[500px] flex flex-col items-center justify-center text-center">
        <SparklesIcon className="w-16 h-16 text-dark-base-300" />
        <h2 className="text-xl font-semibold text-dark-base-content mt-4">Your Workflow Awaits</h2>
        <p className="text-dark-base-content/70 mt-2 max-w-sm">Fill out the project details and click "Generate Project Workflow" to have KARA create a custom plan for you.</p>
      </Card>
    );
  }

  return (
    <Card>
      <div className="flex justify-between items-start mb-4">
        <div>
            <h2 className="text-2xl font-bold mb-1 text-dark-base-content">{workflow.projectName}</h2>
            <p className="text-sm text-dark-base-content/60">A custom workflow generated by KARA.</p>
        </div>
        {workflow.projectName === 'AI Family Marketing Video' && onStartSimulation && (
            <Button onClick={onStartSimulation} className="!py-2 !px-4 text-sm whitespace-nowrap">
                Start Simulation
            </Button>
        )}
      </div>
      <div className="border border-dark-base-300/50 rounded-lg">
        {workflow.workflow.map((phase, index) => (
          <Phase key={index} phase={phase} />
        ))}
      </div>
    </Card>
  );
};

export default WorkflowDisplay;